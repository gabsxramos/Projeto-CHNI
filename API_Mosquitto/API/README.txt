Os c√≥digos consistem em um sistema que integra **FastAPI** com **MQTT**, permitindo que um servidor HTTP consulte os 
√∫ltimos dados recebidos de um broker MQTT. Aqui est√° um resumo do que cada arquivo faz:

---------------------------------------------------------------------------------------------------------------------

### `mqtt_client.py` (Cliente MQTT) ###
Este m√≥dulo gerencia a comunica√ß√£o com um broker MQTT. Ele:
- **Se conecta** ao broker MQTT (`test.mosquitto.org` na porta `1883`).
- **Se inscreve** no t√≥pico `"data/weight"` para receber mensagens.
- **Armazena** a √∫ltima mensagem recebida junto com o timestamp de quando foi recebida.
- **Roda em uma thread separada**, garantindo que a escuta do MQTT n√£o bloqueie outras opera√ß√µes.

üìå **Pontos-chave:**
- Usa `paho-mqtt` para gerenciar a conex√£o e escuta.
- A fun√ß√£o `on_message` processa as mensagens recebidas e armazena o conte√∫do se for JSON v√°lido.
- A fun√ß√£o `get_latest_message()` retorna a √∫ltima mensagem e o timestamp correspondente.

---------------------------------------------------------------------------------------------------------------------

### 2. `main.py` (API FastAPI) ###
Este arquivo cria uma **API com FastAPI** para expor os dados do MQTT atrav√©s de um endpoint HTTP. Ele:
- **Inicia um servidor FastAPI**.
- **Inicializa o cliente MQTT** (`mqtt_client = MQTTClient()`) e o executa em segundo plano (`mqtt_client.start()`).
- **Cria um endpoint `GET /data`**, que retorna a √∫ltima mensagem JSON recebida do MQTT.

üìå **Pontos-chave:**
- O servidor √© ass√≠ncrono (`async def get_data()`).
- A API retorna `{"data": √∫ltimo JSON recebido}` ao ser acessada.

---------------------------------------------------------------------------------------------------------------------

### 3. `requirements.txt` ###
Lista as depend√™ncias do projeto:
- `fastapi` ‚Üí Framework web para criar APIs.
- `paho-mqtt` ‚Üí Biblioteca MQTT para comunica√ß√£o com o broker.
- `uvicorn` ‚Üí Servidor ASGI para rodar o FastAPI.

---------------------------------------------------------------------------------------------------------------------

Fluxo de Funcionamento:
1. O `mqtt_client.py` se conecta ao broker e come√ßa a escutar mensagens do t√≥pico `"data/weight"`.
2. Quando uma mensagem chega, ela √© armazenada e associada a um timestamp.
3. O `main.py` exp√µe um endpoint HTTP (`/data`), que retorna a √∫ltima mensagem MQTT recebida.
4. Voc√™ pode acessar `http://localhost:8000/data` (se estiver rodando localmente) para obter o √∫ltimo dado recebido.

